{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///home/mike/Desktop/https---github.com-James119-nderema-Timetable_Frontend/Components/ClassesPage/ClassTimeDashboard.jsx"],"sourcesContent":["'use client';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\n\nconst ProgramCourses = () => {\n  // State variables\n  const [programs, setPrograms] = useState([]);\n  const [selectedProgram, setSelectedProgram] = useState('');\n  const [periods, setPeriods] = useState([]);\n  const [courses, setCourses] = useState([]);\n  const [selectedPeriod, setSelectedPeriod] = useState('');\n  const [availableCoursesSearch, setAvailableCoursesSearch] = useState('');\n  const [periodCoursesSearch, setPeriodCoursesSearch] = useState('');\n  const [periodCourses, setPeriodCourses] = useState({});\n  const [existingPeriodCourses, setExistingPeriodCourses] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch programs\n  useEffect(() => {\n    const fetchPrograms = async () => {\n      try {\n        const programsResponse = await axios.get('http://localhost:9921/programs');\n        const safePrograms = programsResponse.data.map((program, index) => ({\n          ...program,\n          uniqueId: program.id ? `program-${program.id}` : `program-${index}`,\n          name: program.name || `Unnamed Program ${index + 1}`,\n          numericId: program.id || index + 1,\n        }));\n        setPrograms(safePrograms);\n\n        if (safePrograms.length > 0) {\n          setSelectedProgram(safePrograms[0].uniqueId);\n        }\n      } catch (err) {\n        console.error('Programs Fetch Error:', err);\n        setError(`Failed to load programs: ${err.message}`);\n      }\n    };\n\n    fetchPrograms();\n  }, []);\n\n  // Fetch periods and courses when program is selected\n  useEffect(() => {\n    const fetchPeriodsAndCourses = async () => {\n      if (!selectedProgram) return;\n\n      setLoading(true);\n      setError(null);\n      try {\n        const selectedProgramObj = programs.find((p) => p.uniqueId === selectedProgram);\n        const programId = selectedProgramObj.numericId;\n\n        const periodsResponse = await axios.get('http://localhost:9921/periods');\n        const safePeriods = periodsResponse.data.map((period, index) => ({\n          ...period,\n          uniqueId: period.id ? `period-${period.id}` : `period-${index}`,\n          name: period.name || `Y${Math.floor(index / 2) + 1}S${(index % 2) + 1}`,\n          numericId: period.id || index + 1,\n        }));\n        setPeriods(safePeriods);\n\n        if (safePeriods.length > 0) {\n          setSelectedPeriod(safePeriods[0].uniqueId);\n        }\n\n        const coursesResponse = await axios.get('http://localhost:9921/timeslots');\n        const safeCourses = coursesResponse.data.map((course, index) => ({\n          ...course,\n          uniqueId: course.id ? `course-${course.id}` : `course-${index}`,\n          courseCode: course.courseCode || course.code || `COURSE-${index + 1}`,\n          name: course.name || `Unnamed Course ${index + 1}`,\n          department: course.department || 'Unknown Department',\n        }));\n        setCourses(safeCourses);\n      } catch (err) {\n        console.error('Periods and Courses Fetch Error:', err);\n        setError(`Failed to load periods and courses: ${err.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPeriodsAndCourses();\n  }, [selectedProgram, programs]);\n\n  // Fetch existing courses for the selected program and period\n  useEffect(() => {\n    const fetchExistingCourses = async () => {\n      if (!selectedProgram || !selectedPeriod) return;\n\n      setLoading(true);\n      setError(null);\n      try {\n        const selectedProgramObj = programs.find((p) => p.uniqueId === selectedProgram);\n        const programId = selectedProgramObj.numericId;\n\n        const selectedPeriodObj = periods.find((p) => p.uniqueId === selectedPeriod);\n        const periodId = selectedPeriodObj.numericId;\n\n        const existingCoursesResponse = await axios.get(\n          `http://localhost:9921/programCourses/${programId}/${periodId}`\n        );\n\n        // Check if response is an array before mapping\n        const existingCourses = Array.isArray(existingCoursesResponse.data)\n          ? existingCoursesResponse.data.map((item) => {\n              const courseDetails = courses.find((course) => course.id === item.courseId);\n              return courseDetails\n                ? {\n                    ...courseDetails,\n                    uniqueId: `course-${courseDetails.id}`,\n                  }\n                : { id: item.courseId, name: 'Unknown Course' };\n            })\n          : [];\n\n        setExistingPeriodCourses((prev) => ({\n          ...prev,\n          [selectedPeriod]: existingCourses,\n        }));\n      } catch (err) {\n        console.error('Existing Courses Fetch Error:', err);\n        \n        // Set empty array for existing courses instead of throwing an error\n        setExistingPeriodCourses((prev) => ({\n          ...prev,\n          [selectedPeriod]: [],\n        }));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExistingCourses();\n  }, [selectedProgram, selectedPeriod, programs, periods, courses]);\n\n  // Filtering logic (restored from previous implementation)\n  const filteredExistingPeriodCourses = useMemo(() => {\n    return (existingPeriodCourses[selectedPeriod] || []).filter((course) =>\n      course.name.toLowerCase().includes(periodCoursesSearch.toLowerCase())\n    );\n  }, [periodCoursesSearch, selectedPeriod, existingPeriodCourses]);\n\n  const filteredAvailableCourses = useMemo(() => {\n    const currentPeriodCourses = periodCourses[selectedPeriod] || [];\n    const currentExistingCourses = existingPeriodCourses[selectedPeriod] || [];\n\n    return courses.filter(\n      (course) =>\n        course.uniqueId &&\n        !currentPeriodCourses.some((c) => c.uniqueId === course.uniqueId) &&\n        !currentExistingCourses.some((c) => c.uniqueId === course.uniqueId) &&\n        course.courseCode.toLowerCase().includes(availableCoursesSearch.toLowerCase())\n    );\n  }, [availableCoursesSearch, selectedPeriod, periodCourses, existingPeriodCourses, courses]);\n\n  const filteredSelectedCourses = useMemo(() => {\n    return (periodCourses[selectedPeriod] || []).filter((course) =>\n      course.courseCode.toLowerCase().includes(periodCoursesSearch.toLowerCase())\n    );\n  }, [periodCoursesSearch, selectedPeriod, periodCourses]);\n\n  // Render course list function\n  const renderCourseList = (courses, type = 'available') => {\n    return courses.map((course, index) => {\n      // Ensure a truly unique key by combining uniqueId with index\n      const uniqueKey = `${course.uniqueId || 'course'}-${index}-${type}`;\n      \n      return (\n        <div\n          key={uniqueKey}\n          className=\"flex justify-between items-center p-2 border-b hover:bg-blue-100\"\n        >\n          <div>\n            <p className=\"font-medium text-blue-800\">{course.courseCode}</p>\n            <p className=\"text-sm text-blue-600\">{course.name}</p>\n          </div>\n          {type === 'available' ? (\n            <button\n              onClick={() => addCourseToPeriod(course)}\n              className=\"text-green-600 hover:text-green-800\"\n            >\n              Add\n            </button>\n          ) : type === 'selected' ? (\n            <button\n              onClick={() => removeCourseFromPeriod(course)}\n              className=\"text-red-600 hover:text-red-800\"\n            >\n              Remove\n            </button>\n          ) : (\n            <span className=\"text-blue-500 text-sm\">Existing</span>\n          )}\n        </div>\n      );\n    });\n  };\n\n  // Add and remove course logic\n  const addCourseToPeriod = (course) => {\n    setPeriodCourses((prev) => ({\n      ...prev,\n      [selectedPeriod]: [...(prev[selectedPeriod] || []), course],\n    }));\n  };\n\n  const removeCourseFromPeriod = (courseToRemove) => {\n    setPeriodCourses((prev) => ({\n      ...prev,\n      [selectedPeriod]: prev[selectedPeriod]?.filter(\n        (course) => course.uniqueId !== courseToRemove.uniqueId\n      ) || [],\n    }));\n  };\n\n  // Submit logic\n  const submitSelectedCourses = async () => {\n    try {\n      const selectedProgramObj = programs.find((p) => p.uniqueId === selectedProgram);\n      const selectedPeriodObj = periods.find((p) => p.uniqueId === selectedPeriod);\n\n      if (!selectedProgramObj) {\n        throw new Error('No program selected');\n      }\n\n      if (!selectedPeriodObj) {\n        throw new Error('No period selected');\n      }\n\n      const programId = selectedProgramObj.numericId;\n      const periodId = selectedPeriodObj.numericId;\n\n      const courseIds = (periodCourses[selectedPeriod] || []).map((course) => {\n        const courseId = course.id || course.uniqueId.replace('course-', '');\n        if (!courseId || isNaN(courseId) || courseId === '0') {\n          throw new Error(`Invalid course ID for course: ${course.name}`);\n        }\n        return courseId;\n      });\n\n      for (const courseId of courseIds) {\n        await axios.post('http://localhost:9921/programCourse', {\n          programId,\n          periodId,\n          courseId,\n        });\n      }\n\n      setPeriodCourses((prev) => ({\n        ...prev,\n        [selectedPeriod]: [],\n      }));\n\n      alert('Courses submitted successfully!');\n    } catch (err) {\n      console.error('Submission Error:', err);\n      alert(`Failed to submit courses: ${err.message}`);\n    }\n  };\n\n  // Loading and error states\n  if (loading) {\n    return (\n      <div className=\"container mx-auto p-6 text-center\">\n        <p className=\"text-xl\">Loading...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto p-6 text-center text-red-500\">\n        <p className=\"text-xl\">Error: {error}</p>\n        <p>Please check your backend server and API endpoints.</p>\n      </div>\n    );\n  }\n\n  // Main render\n  return (\n    <div className=\"container mx-auto p-6 bg-blue-50\">\n      {/* Program and Period Selection */}\n      <div className=\"mb-4\">\n        <label htmlFor=\"program-select\" className=\"block text-sm font-medium text-blue-700\">\n          Select Program\n        </label>\n        <select\n          id=\"program-select\"\n          value={selectedProgram}\n          onChange={(e) => setSelectedProgram(e.target.value)}\n          className=\"mt-1 block w-full p-2 border border-blue-300 rounded-md shadow-sm bg-blue-50 text-blue-900\"\n        >\n          {programs.map((program) => (\n            <option key={program.uniqueId} value={program.uniqueId}>\n              {program.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"mb-4\">\n        <label htmlFor=\"period-select\" className=\"block text-sm font-medium text-blue-700\">\n          Select Period\n        </label>\n        <select\n          id=\"period-select\"\n          value={selectedPeriod}\n          onChange={(e) => setSelectedPeriod(e.target.value)}\n          className=\"mt-1 block w-full p-2 border border-blue-300 rounded-md shadow-sm bg-blue-50 text-blue-900\"\n        >\n          {periods.map((period) => (\n            <option key={period.uniqueId} value={period.uniqueId}>\n              {period.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Existing Courses Section */}\n      <div className=\"border rounded-lg shadow-md mb-6 bg-white\">\n        <div className=\"p-4 border-b bg-blue-500 text-white\">\n          <h2 className=\"text-lg font-semibold\">Existing Courses for Selected Period</h2>\n          <input\n            type=\"text\"\n            placeholder=\"Search existing courses\"\n            value={periodCoursesSearch}\n            onChange={(e) => setPeriodCoursesSearch(e.target.value)}\n            className=\"mt-2 block w-full p-2 border border-blue-300 rounded-md shadow-sm bg-blue-50 text-blue-900\"\n          />\n        </div>\n        <div className=\"h-48 overflow-y-auto p-4\">\n          {filteredExistingPeriodCourses.length > 0 \n            ? renderCourseList(filteredExistingPeriodCourses, 'existing')\n            : <p className=\"text-center text-blue-500\">No existing courses</p>\n          }\n        </div>\n      </div>\n\n      {/* Courses Section */}\n      <div className=\"grid grid-cols-2 gap-6\">\n        {/* Available Courses */}\n        <div className=\"border rounded-lg shadow-md bg-white\">\n          <div className=\"p-4 border-b bg-blue-500 text-white\">\n            <h2 className=\"text-lg font-semibold\">Available Courses</h2>\n            <input\n              type=\"text\"\n              placeholder=\"Search available courses\"\n              value={availableCoursesSearch}\n              onChange={(e) => setAvailableCoursesSearch(e.target.value)}\n              className=\"mt-2 block w-full p-2 border border-blue-300 rounded-md shadow-sm bg-blue-50 text-blue-900\"\n            />\n          </div>\n          <div className=\"h-96 overflow-y-auto p-4\">\n            {filteredAvailableCourses.length > 0 \n              ? renderCourseList(filteredAvailableCourses, 'available')\n              : <p className=\"text-center text-blue-500\">No courses found</p>\n            }\n          </div>\n        </div>\n\n        {/* Selected Courses */}\n        <div className=\"border rounded-lg shadow-md bg-white\">\n          <div className=\"p-4 border-b bg-blue-500 text-white\">\n            <h2 className=\"text-lg font-semibold\">Selected Courses</h2>\n            <input\n              type=\"text\"\n              placeholder=\"Search selected courses\"\n              value={periodCoursesSearch}\n              onChange={(e) => setPeriodCoursesSearch(e.target.value)}\n              className=\"mt-2 block w-full p-2 border border-blue-300 rounded-md shadow-sm bg-blue-50 text-blue-900\"\n            />\n          </div>\n          <div className=\"h-96 overflow-y-auto p-4\">\n            {filteredSelectedCourses.length > 0\n              ? renderCourseList(filteredSelectedCourses, 'selected')\n              : <p className=\"text-center text-blue-500\">No courses selected</p>\n            }\n          </div>\n        </div>\n      </div>\n\n      {/* Submit Button */}\n      <div className=\"mt-6 text-center\">\n        <button\n          onClick={submitSelectedCourses}\n          disabled={!(periodCourses[selectedPeriod] && periodCourses[selectedPeriod].length > 0)}\n          className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n        >\n          Submit Selected Courses\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgramCourses;"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;;AAIA,MAAM,iBAAiB;IACrB,kBAAkB;IAClB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAC3C,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACzC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACzC,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,wBAAwB,0BAA0B,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrE,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/D,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IACpD,MAAM,CAAC,uBAAuB,yBAAyB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IACpE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,iBAAiB;IACjB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,gBAAgB;YACpB,IAAI;gBACF,MAAM,mBAAmB,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC;gBACzC,MAAM,eAAe,iBAAiB,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,QAAU,CAAC;wBAClE,GAAG,OAAO;wBACV,UAAU,QAAQ,EAAE,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,OAAO;wBACnE,MAAM,QAAQ,IAAI,IAAI,CAAC,gBAAgB,EAAE,QAAQ,GAAG;wBACpD,WAAW,QAAQ,EAAE,IAAI,QAAQ;oBACnC,CAAC;gBACD,YAAY;gBAEZ,IAAI,aAAa,MAAM,GAAG,GAAG;oBAC3B,mBAAmB,YAAY,CAAC,EAAE,CAAC,QAAQ;gBAC7C;YACF,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,yBAAyB;gBACvC,SAAS,CAAC,yBAAyB,EAAE,IAAI,OAAO,EAAE;YACpD;QACF;QAEA;IACF,GAAG,EAAE;IAEL,qDAAqD;IACrD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,yBAAyB;YAC7B,IAAI,CAAC,iBAAiB;YAEtB,WAAW;YACX,SAAS;YACT,IAAI;gBACF,MAAM,qBAAqB,SAAS,IAAI,CAAC,CAAC,IAAM,EAAE,QAAQ,KAAK;gBAC/D,MAAM,YAAY,mBAAmB,SAAS;gBAE9C,MAAM,kBAAkB,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC;gBACxC,MAAM,cAAc,gBAAgB,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,QAAU,CAAC;wBAC/D,GAAG,MAAM;wBACT,UAAU,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,OAAO;wBAC/D,MAAM,OAAO,IAAI,IAAI,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,QAAQ,KAAK,EAAE,CAAC,EAAE,AAAC,QAAQ,IAAK,GAAG;wBACvE,WAAW,OAAO,EAAE,IAAI,QAAQ;oBAClC,CAAC;gBACD,WAAW;gBAEX,IAAI,YAAY,MAAM,GAAG,GAAG;oBAC1B,kBAAkB,WAAW,CAAC,EAAE,CAAC,QAAQ;gBAC3C;gBAEA,MAAM,kBAAkB,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC;gBACxC,MAAM,cAAc,gBAAgB,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,QAAU,CAAC;wBAC/D,GAAG,MAAM;wBACT,UAAU,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,OAAO;wBAC/D,YAAY,OAAO,UAAU,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,GAAG;wBACrE,MAAM,OAAO,IAAI,IAAI,CAAC,eAAe,EAAE,QAAQ,GAAG;wBAClD,YAAY,OAAO,UAAU,IAAI;oBACnC,CAAC;gBACD,WAAW;YACb,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,oCAAoC;gBAClD,SAAS,CAAC,oCAAoC,EAAE,IAAI,OAAO,EAAE;YAC/D,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG;QAAC;QAAiB;KAAS;IAE9B,6DAA6D;IAC7D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,uBAAuB;YAC3B,IAAI,CAAC,mBAAmB,CAAC,gBAAgB;YAEzC,WAAW;YACX,SAAS;YACT,IAAI;gBACF,MAAM,qBAAqB,SAAS,IAAI,CAAC,CAAC,IAAM,EAAE,QAAQ,KAAK;gBAC/D,MAAM,YAAY,mBAAmB,SAAS;gBAE9C,MAAM,oBAAoB,QAAQ,IAAI,CAAC,CAAC,IAAM,EAAE,QAAQ,KAAK;gBAC7D,MAAM,WAAW,kBAAkB,SAAS;gBAE5C,MAAM,0BAA0B,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAC7C,CAAC,qCAAqC,EAAE,UAAU,CAAC,EAAE,UAAU;gBAGjE,+CAA+C;gBAC/C,MAAM,kBAAkB,MAAM,OAAO,CAAC,wBAAwB,IAAI,IAC9D,wBAAwB,IAAI,CAAC,GAAG,CAAC,CAAC;oBAChC,MAAM,gBAAgB,QAAQ,IAAI,CAAC,CAAC,SAAW,OAAO,EAAE,KAAK,KAAK,QAAQ;oBAC1E,OAAO,gBACH;wBACE,GAAG,aAAa;wBAChB,UAAU,CAAC,OAAO,EAAE,cAAc,EAAE,EAAE;oBACxC,IACA;wBAAE,IAAI,KAAK,QAAQ;wBAAE,MAAM;oBAAiB;gBAClD,KACA,EAAE;gBAEN,yBAAyB,CAAC,OAAS,CAAC;wBAClC,GAAG,IAAI;wBACP,CAAC,eAAe,EAAE;oBACpB,CAAC;YACH,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,iCAAiC;gBAE/C,oEAAoE;gBACpE,yBAAyB,CAAC,OAAS,CAAC;wBAClC,GAAG,IAAI;wBACP,CAAC,eAAe,EAAE,EAAE;oBACtB,CAAC;YACH,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG;QAAC;QAAiB;QAAgB;QAAU;QAAS;KAAQ;IAEhE,0DAA0D;IAC1D,MAAM,gCAAgC,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QAC5C,OAAO,CAAC,qBAAqB,CAAC,eAAe,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC,SAC3D,OAAO,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,oBAAoB,WAAW;IAEtE,GAAG;QAAC;QAAqB;QAAgB;KAAsB;IAE/D,MAAM,2BAA2B,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACvC,MAAM,uBAAuB,aAAa,CAAC,eAAe,IAAI,EAAE;QAChE,MAAM,yBAAyB,qBAAqB,CAAC,eAAe,IAAI,EAAE;QAE1E,OAAO,QAAQ,MAAM,CACnB,CAAC,SACC,OAAO,QAAQ,IACf,CAAC,qBAAqB,IAAI,CAAC,CAAC,IAAM,EAAE,QAAQ,KAAK,OAAO,QAAQ,KAChE,CAAC,uBAAuB,IAAI,CAAC,CAAC,IAAM,EAAE,QAAQ,KAAK,OAAO,QAAQ,KAClE,OAAO,UAAU,CAAC,WAAW,GAAG,QAAQ,CAAC,uBAAuB,WAAW;IAEjF,GAAG;QAAC;QAAwB;QAAgB;QAAe;QAAuB;KAAQ;IAE1F,MAAM,0BAA0B,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACtC,OAAO,CAAC,aAAa,CAAC,eAAe,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC,SACnD,OAAO,UAAU,CAAC,WAAW,GAAG,QAAQ,CAAC,oBAAoB,WAAW;IAE5E,GAAG;QAAC;QAAqB;QAAgB;KAAc;IAEvD,8BAA8B;IAC9B,MAAM,mBAAmB,CAAC,SAAS,OAAO,WAAW;QACnD,OAAO,QAAQ,GAAG,CAAC,CAAC,QAAQ;YAC1B,6DAA6D;YAC7D,MAAM,YAAY,GAAG,OAAO,QAAQ,IAAI,SAAS,CAAC,EAAE,MAAM,CAAC,EAAE,MAAM;YAEnE,qBACE,8OAAC;gBAEC,WAAU;;kCAEV,8OAAC;;0CACC,8OAAC;gCAAE,WAAU;0CAA6B,OAAO,UAAU;;;;;;0CAC3D,8OAAC;gCAAE,WAAU;0CAAyB,OAAO,IAAI;;;;;;;;;;;;oBAElD,SAAS,4BACR,8OAAC;wBACC,SAAS,IAAM,kBAAkB;wBACjC,WAAU;kCACX;;;;;+BAGC,SAAS,2BACX,8OAAC;wBACC,SAAS,IAAM,uBAAuB;wBACtC,WAAU;kCACX;;;;;6CAID,8OAAC;wBAAK,WAAU;kCAAwB;;;;;;;eAtBrC;;;;;QA0BX;IACF;IAEA,8BAA8B;IAC9B,MAAM,oBAAoB,CAAC;QACzB,iBAAiB,CAAC,OAAS,CAAC;gBAC1B,GAAG,IAAI;gBACP,CAAC,eAAe,EAAE;uBAAK,IAAI,CAAC,eAAe,IAAI,EAAE;oBAAG;iBAAO;YAC7D,CAAC;IACH;IAEA,MAAM,yBAAyB,CAAC;QAC9B,iBAAiB,CAAC,OAAS,CAAC;gBAC1B,GAAG,IAAI;gBACP,CAAC,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,OACtC,CAAC,SAAW,OAAO,QAAQ,KAAK,eAAe,QAAQ,KACpD,EAAE;YACT,CAAC;IACH;IAEA,eAAe;IACf,MAAM,wBAAwB;QAC5B,IAAI;YACF,MAAM,qBAAqB,SAAS,IAAI,CAAC,CAAC,IAAM,EAAE,QAAQ,KAAK;YAC/D,MAAM,oBAAoB,QAAQ,IAAI,CAAC,CAAC,IAAM,EAAE,QAAQ,KAAK;YAE7D,IAAI,CAAC,oBAAoB;gBACvB,MAAM,IAAI,MAAM;YAClB;YAEA,IAAI,CAAC,mBAAmB;gBACtB,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,YAAY,mBAAmB,SAAS;YAC9C,MAAM,WAAW,kBAAkB,SAAS;YAE5C,MAAM,YAAY,CAAC,aAAa,CAAC,eAAe,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC;gBAC3D,MAAM,WAAW,OAAO,EAAE,IAAI,OAAO,QAAQ,CAAC,OAAO,CAAC,WAAW;gBACjE,IAAI,CAAC,YAAY,MAAM,aAAa,aAAa,KAAK;oBACpD,MAAM,IAAI,MAAM,CAAC,8BAA8B,EAAE,OAAO,IAAI,EAAE;gBAChE;gBACA,OAAO;YACT;YAEA,KAAK,MAAM,YAAY,UAAW;gBAChC,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,uCAAuC;oBACtD;oBACA;oBACA;gBACF;YACF;YAEA,iBAAiB,CAAC,OAAS,CAAC;oBAC1B,GAAG,IAAI;oBACP,CAAC,eAAe,EAAE,EAAE;gBACtB,CAAC;YAED,MAAM;QACR,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,qBAAqB;YACnC,MAAM,CAAC,0BAA0B,EAAE,IAAI,OAAO,EAAE;QAClD;IACF;IAEA,2BAA2B;IAC3B,IAAI,SAAS;QACX,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAE,WAAU;0BAAU;;;;;;;;;;;IAG7B;IAEA,IAAI,OAAO;QACT,qBACE,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAE,WAAU;;wBAAU;wBAAQ;;;;;;;8BAC/B,8OAAC;8BAAE;;;;;;;;;;;;IAGT;IAEA,cAAc;IACd,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAM,SAAQ;wBAAiB,WAAU;kCAA0C;;;;;;kCAGpF,8OAAC;wBACC,IAAG;wBACH,OAAO;wBACP,UAAU,CAAC,IAAM,mBAAmB,EAAE,MAAM,CAAC,KAAK;wBAClD,WAAU;kCAET,SAAS,GAAG,CAAC,CAAC,wBACb,8OAAC;gCAA8B,OAAO,QAAQ,QAAQ;0CACnD,QAAQ,IAAI;+BADF,QAAQ,QAAQ;;;;;;;;;;;;;;;;0BAOnC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAM,SAAQ;wBAAgB,WAAU;kCAA0C;;;;;;kCAGnF,8OAAC;wBACC,IAAG;wBACH,OAAO;wBACP,UAAU,CAAC,IAAM,kBAAkB,EAAE,MAAM,CAAC,KAAK;wBACjD,WAAU;kCAET,QAAQ,GAAG,CAAC,CAAC,uBACZ,8OAAC;gCAA6B,OAAO,OAAO,QAAQ;0CACjD,OAAO,IAAI;+BADD,OAAO,QAAQ;;;;;;;;;;;;;;;;0BAQlC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAwB;;;;;;0CACtC,8OAAC;gCACC,MAAK;gCACL,aAAY;gCACZ,OAAO;gCACP,UAAU,CAAC,IAAM,uBAAuB,EAAE,MAAM,CAAC,KAAK;gCACtD,WAAU;;;;;;;;;;;;kCAGd,8OAAC;wBAAI,WAAU;kCACZ,8BAA8B,MAAM,GAAG,IACpC,iBAAiB,+BAA+B,4BAChD,8OAAC;4BAAE,WAAU;sCAA4B;;;;;;;;;;;;;;;;;0BAMjD,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAG,WAAU;kDAAwB;;;;;;kDACtC,8OAAC;wCACC,MAAK;wCACL,aAAY;wCACZ,OAAO;wCACP,UAAU,CAAC,IAAM,0BAA0B,EAAE,MAAM,CAAC,KAAK;wCACzD,WAAU;;;;;;;;;;;;0CAGd,8OAAC;gCAAI,WAAU;0CACZ,yBAAyB,MAAM,GAAG,IAC/B,iBAAiB,0BAA0B,6BAC3C,8OAAC;oCAAE,WAAU;8CAA4B;;;;;;;;;;;;;;;;;kCAMjD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAG,WAAU;kDAAwB;;;;;;kDACtC,8OAAC;wCACC,MAAK;wCACL,aAAY;wCACZ,OAAO;wCACP,UAAU,CAAC,IAAM,uBAAuB,EAAE,MAAM,CAAC,KAAK;wCACtD,WAAU;;;;;;;;;;;;0CAGd,8OAAC;gCAAI,WAAU;0CACZ,wBAAwB,MAAM,GAAG,IAC9B,iBAAiB,yBAAyB,4BAC1C,8OAAC;oCAAE,WAAU;8CAA4B;;;;;;;;;;;;;;;;;;;;;;;0BAOnD,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBACC,SAAS;oBACT,UAAU,CAAC,CAAC,aAAa,CAAC,eAAe,IAAI,aAAa,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC;oBACrF,WAAU;8BACX;;;;;;;;;;;;;;;;;AAMT;uCAEe","debugId":null}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 713, "column": 0}, "map": {"version":3,"sources":["file:///home/mike/Desktop/https---github.com-James119-nderema-Timetable_Frontend/app/class_details/classtimedashboard/%5BclassId%5D/page.js"],"sourcesContent":["'use client';\nimport ClassTimeDashboard from \"@/Components/ClassesPage/ClassTimeDashboard\";\n\nexport default function EditClassTimeDashboard() {\n  return < ClassTimeDashboard/>;\n} "],"names":[],"mappings":";;;;AACA;AADA;;;AAGe,SAAS;IACtB,qBAAO,8OAAE,gJAAA,CAAA,UAAkB;;;;;AAC7B","debugId":null}},
    {"offset": {"line": 728, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}