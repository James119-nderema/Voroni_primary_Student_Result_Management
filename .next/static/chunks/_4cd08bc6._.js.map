{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Websites/https---github.com-James119-nderema-Timetable_Frontend/Components/ProgramCoursesPage/ProgramCourses.jsx"],"sourcesContent":["'use client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useRouter } from 'next/navigation';\r\n\r\nconst ProgramCourses = () => {\r\n  const params = useParams();\r\n  const router = useRouter();\r\n  const [programId, setProgramId] = useState(null);\r\n  const [programName, setProgramName] = useState('');\r\n  const [courses, setCourses] = useState([]);\r\n  const [periods, setPeriods] = useState([]);\r\n  const [tableRows, setTableRows] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    const initializeTable = () => {\r\n      const emptyRows = Array.from({ length: 10 }, (_, index) => ({\r\n        id: index,\r\n        periodId: '',\r\n        courseId: ''\r\n      }));\r\n      setTableRows(emptyRows);\r\n    };\r\n\r\n    initializeTable();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const idFromUrl = params.programId;\r\n        const idFromStorage = localStorage.getItem('selectedProgramId');\r\n        const resolvedProgramId = idFromUrl || idFromStorage;\r\n\r\n        if (!resolvedProgramId) {\r\n          throw new Error('No program ID found');\r\n        }\r\n\r\n        setProgramId(resolvedProgramId);\r\n\r\n        const [programResponse, coursesResponse, periodsResponse] = await Promise.all([\r\n          axios.get(`http://localhost:9921/programs/${resolvedProgramId}`),\r\n          axios.get('http://localhost:9921/courses'),\r\n          axios.get('http://localhost:9921/periods'),\r\n        ]);\r\n\r\n        setProgramName(programResponse.data.programName);\r\n        setCourses(coursesResponse.data);\r\n        setPeriods(periodsResponse.data);\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        setError(err.message || 'Failed to load required data');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [params]);\r\n\r\n  const handleInputChange = (rowId, field, value) => {\r\n    setTableRows((prevRows) =>\r\n      prevRows.map((row) => (row.id === rowId ? { ...row, [field]: value } : row))\r\n    );\r\n    setSuccessMessage('');\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const filledRows = tableRows.filter(row => row.periodId && row.courseId);\r\n    if (filledRows.length === 0) {\r\n      setError('Please fill at least one row before submitting.');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setError(null);\r\n\r\n    if (!validateForm()) return;\r\n\r\n    setSubmitting(true);\r\n\r\n    try {\r\n      const filledRows = tableRows.filter(row => row.periodId && row.courseId);\r\n      const junctionTableData = filledRows.map(row => ({\r\n        programId,\r\n        periodId: row.periodId,\r\n        courseId: row.courseId,\r\n      }));\r\n\r\n      await axios.post('http://localhost:9921/programcourses/mapping', junctionTableData);\r\n\r\n      setTableRows(Array.from({ length: 10 }, (_, index) => ({\r\n        id: index,\r\n        periodId: '',\r\n        courseId: ''\r\n      })));\r\n      \r\n      setSuccessMessage('Course mappings saved successfully!');\r\n      setTimeout(() => setSuccessMessage(''), 5000);\r\n    } catch (err) {\r\n      console.error('Error submitting data:', err);\r\n      setError(err.response?.data?.message || 'Failed to save course mappings. Please try again.');\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleClearTable = () => {\r\n    setTableRows(Array.from({ length: 10 }, (_, index) => ({\r\n      id: index,\r\n      periodId: '',\r\n      courseId: ''\r\n    })));\r\n    setError(null);\r\n    setSuccessMessage('');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"p-6 flex items-center justify-center h-40 text-gray-600\">\r\n        Loading program course mapping...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <div className=\"mb-6\">\r\n        <h3 className=\"text-lg text-green-900 font-semibold\">\r\n          Program Course Mapping: {programName || programId}\r\n        </h3>\r\n        <p className=\"text-sm text-gray-500\">Assign courses to periods for this program</p>\r\n      </div>\r\n\r\n      {error && <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">{error}</div>}\r\n      {successMessage && <div className=\"mb-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded\">{successMessage}</div>}\r\n\r\n      <div className=\"bg-white rounded-lg shadow-md overflow-hidden mb-6\">\r\n        <table className=\"min-w-full divide-y divide-gray-200\">\r\n          <thead className=\"bg-gray-50\">\r\n            <tr>\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Row</th>\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Period</th>\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Course Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"bg-white divide-y divide-gray-200\">\r\n            {tableRows.map((row, index) => (\r\n              <tr key={row.id}>\r\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{index + 1}</td>\r\n                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                  <select\r\n                    value={row.periodId}\r\n                    onChange={(e) => handleInputChange(row.id, 'periodId', e.target.value)}\r\n                    className=\"block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                  >\r\n                    <option value=\"\">Select Period</option>\r\n                    {periods.map((period) => (\r\n                      <option key={period.periodId} value={period.periodId}>{period.periodName}</option>\r\n                    ))}\r\n                  </select>\r\n                </td>\r\n                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                  <select\r\n                    value={row.courseId}\r\n                    onChange={(e) => handleInputChange(row.id, 'courseId', e.target.value)}\r\n                    className=\"block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                  >\r\n                    <option value=\"\">Select Course</option>\r\n                    {courses.map((course) => (\r\n                      <option key={course.courseId} value={course.courseId}>{course.courseName}</option>\r\n                    ))}\r\n                  </select>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"flex justify-end space-x-4\">\r\n        <button onClick={handleClearTable} className=\"px-4 py-2 bg-gray-500 text-white rounded-md text-sm font-medium hover:bg-gray-600\">\r\n          Clear Table\r\n        </button>\r\n        <button onClick={handleSubmit} disabled={submitting} className=\"px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium hover:bg-indigo-700 disabled:bg-indigo-300\">\r\n          {submitting ? 'Saving...' : 'Save Mappings'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgramCourses;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Websites/https---github.com-James119-nderema-Timetable_Frontend/app/ProgramCourses/%5BprogramId%5D/page.js"],"sourcesContent":["'use client';\r\nimport ProgramCourses from \"@/Components/ProgramCoursesPage/ProgramCourses\";\r\n\r\nexport default function EditProgramCourses() {\r\n  return < ProgramCourses/>;\r\n}"],"names":[],"mappings":";;;;AACA;AADA;;;AAGe,SAAS;IACtB,qBAAO,6LAAE,sJAAA,CAAA,UAAc;;;;;AACzB;KAFwB","debugId":null}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}