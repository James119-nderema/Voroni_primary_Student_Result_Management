{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Websites/https---github.com-James119-nderema-Timetable_Frontend/Components/ProgramCoursesPage/programcourses.jsx"],"sourcesContent":["'use client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useRouter } from 'next/navigation';\r\n\r\nconst programcourses = () => {\r\n  const params = useParams();\r\n  const router = useRouter();\r\n  const [programId, setProgramId] = useState(null);\r\n  const [programName, setProgramName] = useState('');\r\n  const [courses, setCourses] = useState([]);\r\n  const [periods, setPeriods] = useState([]);\r\n  const [tableRows, setTableRows] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n\r\n  // Initialize table with 10 empty rows\r\n  useEffect(() => {\r\n    const initializeTable = () => {\r\n      const emptyRows = Array(10).fill().map((_, index) => ({\r\n        id: index,\r\n        periodId: '',\r\n        courseId: ''\r\n      }));\r\n      setTableRows(emptyRows);\r\n    };\r\n\r\n    initializeTable();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // Get programId from URL or localStorage\r\n        const idFromUrl = params.programId;\r\n        const idFromStorage = localStorage.getItem('selectedProgramId');\r\n        const resolvedProgramId = idFromUrl || idFromStorage;\r\n        \r\n        if (!resolvedProgramId) {\r\n          throw new Error('No program ID found');\r\n        }\r\n        \r\n        setProgramId(resolvedProgramId);\r\n        \r\n        // Get program details\r\n        const programResponse = await axios.get(`http://localhost:9921/programs/${resolvedProgramId}`);\r\n        setProgramName(programResponse.data.programName);\r\n        \r\n        // Get all available courses\r\n        const coursesResponse = await axios.get('http://localhost:9921/courses');\r\n        setCourses(coursesResponse.data);\r\n        \r\n        // Get all available periods\r\n        const periodsResponse = await axios.get('http://localhost:9921/periods');\r\n        setPeriods(periodsResponse.data);\r\n        \r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        setError(err.message || 'Failed to load required data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [params]);\r\n\r\n  const handleInputChange = (rowId, field, value) => {\r\n    setTableRows(prevRows => \r\n      prevRows.map(row => \r\n        row.id === rowId ? { ...row, [field]: value } : row\r\n      )\r\n    );\r\n    \r\n    // Clear any previous success message when user makes changes\r\n    if (successMessage) {\r\n      setSuccessMessage('');\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    // Filter out empty rows (where both period and course are empty)\r\n    const filledRows = tableRows.filter(row => row.periodId || row.courseId);\r\n    \r\n    // Check if any row has only one field filled\r\n    const invalidRows = filledRows.filter(row => \r\n      (row.periodId && !row.courseId) || (!row.periodId && row.courseId)\r\n    );\r\n    \r\n    if (invalidRows.length > 0) {\r\n      setError('Some rows have missing period or course. Please complete or clear these rows.');\r\n      return false;\r\n    }\r\n    \r\n    // At least one row must be filled\r\n    if (filledRows.length === 0) {\r\n      setError('Please fill at least one row before submitting.');\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setError(null);\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    setSubmitting(true);\r\n    \r\n    try {\r\n      // Filter out empty rows\r\n      const filledRows = tableRows.filter(row => row.periodId && row.courseId);\r\n      \r\n      // Prepare data for junction table\r\n      const junctionTableData = filledRows.map(row => ({\r\n        programId: programId,\r\n        periodId: row.periodId,\r\n        courseId: row.courseId\r\n      }));\r\n      \r\n      // Submit the data to your backend\r\n      await axios.post('http://localhost:9921/programcourses/mapping', junctionTableData);\r\n      \r\n      // Reset the table after successful submission\r\n      const emptyRows = Array(10).fill().map((_, index) => ({\r\n        id: index,\r\n        periodId: '',\r\n        courseId: ''\r\n      }));\r\n      \r\n      setTableRows(emptyRows);\r\n      setSuccessMessage('Course mappings saved successfully!');\r\n      \r\n      // Auto-dismiss success message after 5 seconds\r\n      setTimeout(() => {\r\n        setSuccessMessage('');\r\n      }, 5000);\r\n      \r\n    } catch (err) {\r\n      console.error('Error submitting data:', err);\r\n      setError(err.response?.data?.message || 'Failed to save course mappings. Please try again.');\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleClearTable = () => {\r\n    const emptyRows = Array(10).fill().map((_, index) => ({\r\n      id: index,\r\n      periodId: '',\r\n      courseId: ''\r\n    }));\r\n    setTableRows(emptyRows);\r\n    setError(null);\r\n    setSuccessMessage('');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"p-6\">\r\n        <div className=\"flex items-center justify-center h-40\">\r\n          <div className=\"text-gray-600\">Loading program course mapping...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <div className=\"mb-6\">\r\n        <h3 className=\"text-lg text-green-900 font-semibold\">\r\n          Program Course Mapping: {programName || programId}\r\n        </h3>\r\n        <p className=\"text-sm text-gray-500\">\r\n          Assign courses to periods for this program\r\n        </p>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\r\n          <strong>Error:</strong> {error}\r\n        </div>\r\n      )}\r\n\r\n      {successMessage && (\r\n        <div className=\"mb-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded\">\r\n          {successMessage}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"bg-white rounded-lg shadow-md overflow-hidden mb-6\">\r\n        <table className=\"min-w-full divide-y divide-gray-200\">\r\n          <thead className=\"bg-gray-50\">\r\n            <tr>\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Row\r\n              </th>\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Period\r\n              </th>\r\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                Course Name\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"bg-white divide-y divide-gray-200\">\r\n            {tableRows.map((row, index) => (\r\n              <tr key={row.id}>\r\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                  {index + 1}\r\n                </td>\r\n                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                  <select\r\n                    value={row.periodId}\r\n                    onChange={(e) => handleInputChange(row.id, 'periodId', e.target.value)}\r\n                    className=\"block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                  >\r\n                    <option value=\"\">Select Period</option>\r\n                    {periods.map((period) => (\r\n                      <option key={period.periodId} value={period.periodId}>\r\n                        {period.periodName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </td>\r\n                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                  <select\r\n                    value={row.courseId}\r\n                    onChange={(e) => handleInputChange(row.id, 'courseId', e.target.value)}\r\n                    className=\"block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                  >\r\n                    <option value=\"\">Select Course</option>\r\n                    {courses.map((course) => (\r\n                      <option key={course.courseId} value={course.courseId}>\r\n                        {course.courseName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"flex justify-end space-x-4\">\r\n        <button\r\n          onClick={handleClearTable}\r\n          className=\"px-4 py-2 bg-gray-500 text-white rounded-md text-sm font-medium hover:bg-gray-600\"\r\n        >\r\n          Clear Table\r\n        </button>\r\n        <button\r\n          onClick={handleSubmit}\r\n          disabled={submitting}\r\n          className=\"px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium hover:bg-indigo-700 disabled:bg-indigo-300\"\r\n        >\r\n          {submitting ? 'Saving...' : 'Save Mappings'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default programcourses;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Websites/https---github.com-James119-nderema-Timetable_Frontend/app/programcourses/%5BprogramId%5D/page.js"],"sourcesContent":["'use client';\r\nimport programcourses from \"@/Components/ProgramCoursesPage/programcourses\";\r\n\r\nexport default function EditRoomPage() {\r\n  return < programcourses/>;\r\n}"],"names":[],"mappings":";;;;AACA;AADA;;;AAGe,SAAS;IACtB,qBAAO,6LAAE;;;;;AACX;KAFwB","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}